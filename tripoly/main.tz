{ parameter
    (or (or (or (unit %clock) (nat %dice)) (or (string %join) (unit %leave)))
        (or (or (mutez %payout) (unit %refill))
            (or (pair %setField (pair (pair nat nat) (pair address mutez)) nat) (unit %support)))) ;
  storage
    (pair (pair (map nat
                     (pair (pair (nat %co2_multiplier) (nat %current_stock))
                           (pair (address %token_address) (mutez %token_price))))
                (map address
                     (pair (pair (pair (nat %current_step) (timestamp %last_dice_roll))
                                 (pair (string %name) (nat %position)))
                           (pair (nat %saved_co2_kilos)
                                 (list %supported_fields (pair (nat %co2_multiplier) (address %token_address)))))))
          nat) ;
  code { PUSH address "tz1MEiHXRpHFmptzJyx4taqCmTHAYbcLpZUi" ;
         PUSH nat 18 ;
         PUSH mutez 1000000 ;
         PUSH bool True ;
         DUP 3 ;
         DUG 2 ;
         DUP ;
         DUG 3 ;
         PAIR 3 ;
         LAMBDA
           (pair (pair bool (pair mutez nat))
                 (pair (pair nat address)
                       (pair (map address
                                  (pair (pair (pair nat timestamp) (pair string nat)) (pair nat (list (pair nat address)))))
                             nat)))
           (pair (list operation)
                 (map address
                      (pair (pair (pair nat timestamp) (pair string nat)) (pair nat (list (pair nat address))))))
           { UNPAIR ;
             UNPAIR 3 ;
             DIG 3 ;
             UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR ;
             PUSH nat 1 ;
             DUP 4 ;
             COMPARE ;
             LT ;
             DIG 5 ;
             IF { PUSH nat 20 } { PUSH nat 6 } ;
             DUP 5 ;
             COMPARE ;
             GT ;
             OR ;
             IF { DROP 6 ;
                  PUSH string "You can only step at least 1 and maximum 6 fields." ;
                  FAILWITH }
                { DUP ;
                  DUP 5 ;
                  GET ;
                  IF_NONE
                    { DROP 6 ; PUSH string "Please join the game first to play." ; FAILWITH }
                    { DIG 2 ;
                      SWAP ;
                      DUP ;
                      DUG 2 ;
                      CAR ;
                      CAR ;
                      CAR ;
                      COMPARE ;
                      GE ;
                      IF { DROP 6 ;
                           PUSH string
                                "You have to wait until everybody played and a new round is over. Come back in a few minutes." ;
                           FAILWITH }
                         { DIG 2 ;
                           SWAP ;
                           DUP ;
                           DUG 2 ;
                           CAR ;
                           CDR ;
                           CDR ;
                           ADD ;
                           DIG 5 ;
                           SWAP ;
                           DUP ;
                           DUG 2 ;
                           EDIV ;
                           IF_NONE { PUSH string "MOD by 0" ; FAILWITH } {} ;
                           CDR ;
                           PUSH nat 17 ;
                           DIG 2 ;
                           COMPARE ;
                           GT ;
                           IF { PUSH bool True } { PUSH bool False } ;
                           DUP ;
                           DUP 4 ;
                           PUSH nat 0 ;
                           SWAP ;
                           CDR ;
                           CDR ;
                           ITER { CAR ; ADD } ;
                           SWAP ;
                           IF { PUSH nat 100 ; MUL } { DROP ; PUSH nat 0 } ;
                           DUP 4 ;
                           CDR ;
                           CDR ;
                           SWAP ;
                           DUP 5 ;
                           CDR ;
                           CAR ;
                           ADD ;
                           PAIR ;
                           DIG 2 ;
                           DUP 4 ;
                           CAR ;
                           CDR ;
                           CAR ;
                           PAIR ;
                           NOW ;
                           PUSH nat 1 ;
                           DIG 5 ;
                           CAR ;
                           CAR ;
                           CAR ;
                           ADD ;
                           PAIR ;
                           PAIR ;
                           PAIR ;
                           DIG 2 ;
                           SWAP ;
                           SOME ;
                           DIG 3 ;
                           UPDATE ;
                           DUP 3 ;
                           BALANCE ;
                           COMPARE ;
                           GE ;
                           IF { SWAP ;
                                IF { SENDER ;
                                     CONTRACT unit ;
                                     IF_NONE { PUSH string "Not a contract" ; FAILWITH } {} ;
                                     DIG 2 ;
                                     UNIT ;
                                     TRANSFER_TOKENS ;
                                     NIL operation ;
                                     SWAP ;
                                     CONS }
                                   { SWAP ; DROP ; NIL operation } }
                              { SWAP ; DIG 2 ; DROP 2 ; NIL operation } ;
                           PAIR } } } } ;
         SWAP ;
         APPLY ;
         LAMBDA
           (pair (pair (pair (pair (pair nat timestamp) (pair string nat)) (pair nat (list (pair nat address))))
                       address)
                 (pair (map address
                            (pair (pair (pair nat timestamp) (pair string nat)) (pair nat (list (pair nat address)))))
                       (pair (pair nat nat) (pair address mutez))))
           (map address
                (pair (pair (pair nat timestamp) (pair string nat)) (pair nat (list (pair nat address)))))
           { UNPAIR ;
             UNPAIR ;
             DIG 2 ;
             UNPAIR ;
             DUP 3 ;
             CDR ;
             CDR ;
             DUP 3 ;
             CDR ;
             CAR ;
             DIG 3 ;
             CAR ;
             CAR ;
             PAIR ;
             CONS ;
             DUP 3 ;
             CDR ;
             CAR ;
             PAIR ;
             DIG 2 ;
             CAR ;
             PAIR ;
             SOME ;
             DIG 2 ;
             UPDATE } ;
         DIG 5 ;
         UNPAIR ;
         DIG 5 ;
         DUP 3 ;
         CAR ;
         CAR ;
         SIZE ;
         COMPARE ;
         LT ;
         IF { DROP 6 ;
              PUSH string "There are not enough NFTs in the storage, yet." ;
              FAILWITH }
            { IF_LEFT
                { DIG 2 ;
                  DIG 4 ;
                  DIG 5 ;
                  DROP 3 ;
                  IF_LEFT
                    { IF_LEFT
                        { DROP ;
                          DUP ;
                          CDR ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          CAR ;
                          CDR ;
                          DUP ;
                          NIL operation ;
                          PAIR ;
                          SWAP ;
                          ITER { SWAP ;
                                 PUSH int 120 ;
                                 DUP 3 ;
                                 CDR ;
                                 CAR ;
                                 CAR ;
                                 CDR ;
                                 ADD ;
                                 NOW ;
                                 COMPARE ;
                                 GT ;
                                 DUP 4 ;
                                 DUP 4 ;
                                 CDR ;
                                 CAR ;
                                 CAR ;
                                 CAR ;
                                 COMPARE ;
                                 LT ;
                                 AND ;
                                 IF { DUP 3 ;
                                      SWAP ;
                                      DUP ;
                                      DUG 2 ;
                                      CDR ;
                                      PAIR ;
                                      DIG 2 ;
                                      CAR ;
                                      PUSH nat 1 ;
                                      PAIR ;
                                      PAIR ;
                                      DUP 5 ;
                                      SWAP ;
                                      EXEC }
                                    { SWAP ; DROP ; DUP ; CDR ; NIL operation ; PAIR } ;
                                 UNPAIR ;
                                 IF_CONS { SWAP ; DROP ; SOME } { NONE operation } ;
                                 IF_NONE
                                   { SWAP ; CAR ; PAIR }
                                   { SWAP ; DIG 2 ; CAR ; DIG 2 ; CONS ; PAIR } } ;
                          DIG 3 ;
                          DROP ;
                          PUSH nat 0 ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          CDR ;
                          ITER { SWAP ;
                                 DUP 4 ;
                                 DIG 2 ;
                                 CDR ;
                                 CAR ;
                                 CAR ;
                                 CAR ;
                                 COMPARE ;
                                 NEQ ;
                                 IF { PUSH nat 1 ; ADD } { PUSH nat 0 ; ADD } } ;
                          PUSH nat 0 ;
                          SWAP ;
                          COMPARE ;
                          EQ ;
                          IF { PUSH nat 1 ; DIG 2 ; ADD ; SWAP ; PAIR } { PAIR } ;
                          DUP ;
                          CDR ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          CAR ;
                          CDR ;
                          DIG 3 ;
                          CAR ;
                          CAR ;
                          PAIR ;
                          PAIR ;
                          SWAP ;
                          CAR ;
                          CAR ;
                          PAIR }
                        { SWAP ;
                          DUP ;
                          DUG 2 ;
                          CDR ;
                          DUP 3 ;
                          CAR ;
                          CDR ;
                          PAIR ;
                          SENDER ;
                          DIG 2 ;
                          PAIR ;
                          PAIR ;
                          DIG 2 ;
                          SWAP ;
                          EXEC ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          CDR ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          CDR ;
                          DIG 3 ;
                          CAR ;
                          CAR ;
                          PAIR ;
                          PAIR ;
                          SWAP ;
                          CAR ;
                          PAIR } }
                    { DIG 2 ;
                      DROP ;
                      IF_LEFT
                        { SWAP ;
                          DUP ;
                          DUG 2 ;
                          CAR ;
                          CDR ;
                          SWAP ;
                          PUSH nat 1 ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          SIZE ;
                          COMPARE ;
                          LT ;
                          IF { DROP 2 ; PUSH string "Please enter a name." ; FAILWITH }
                             { SENDER ;
                               DUP 3 ;
                               SWAP ;
                               DUP ;
                               DUG 2 ;
                               GET ;
                               IF_NONE
                                 { NIL (pair nat address) ;
                                   PUSH nat 0 ;
                                   PAIR ;
                                   PUSH nat 0 ;
                                   DIG 3 ;
                                   PAIR ;
                                   NOW ;
                                   PUSH nat 0 ;
                                   PAIR ;
                                   PAIR ;
                                   PAIR ;
                                   DIG 2 ;
                                   SWAP ;
                                   DIG 2 ;
                                   SWAP ;
                                   SOME ;
                                   SWAP ;
                                   UPDATE }
                                 { DROP 4 ; PUSH string "You are already playing the game." ; FAILWITH } } ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          CDR ;
                          SWAP ;
                          DIG 2 ;
                          CAR ;
                          CAR ;
                          PAIR ;
                          PAIR ;
                          NIL operation ;
                          PAIR }
                        { DROP ;
                          DUP ;
                          CAR ;
                          CDR ;
                          SENDER ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          GET ;
                          IF_NONE
                            { DROP 2 ;
                              PUSH string "You are not in the game, yet, no possible to leave." ;
                              FAILWITH }
                            { DROP ;
                              NONE (pair (pair (pair nat timestamp) (pair string nat)) (pair nat (list (pair nat address)))) ;
                              SWAP ;
                              UPDATE } ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          CDR ;
                          SWAP ;
                          DIG 2 ;
                          CAR ;
                          CAR ;
                          PAIR ;
                          PAIR ;
                          NIL operation ;
                          PAIR } } }
                { DIG 3 ;
                  DROP ;
                  IF_LEFT
                    { DIG 2 ;
                      DIG 3 ;
                      DROP 2 ;
                      IF_LEFT
                        { DUP 3 ;
                          SENDER ;
                          COMPARE ;
                          NEQ ;
                          IF { DIG 2 ; DROP 2 ; PUSH string "Access denied." ; FAILWITH }
                             { DUP ;
                               BALANCE ;
                               COMPARE ;
                               GE ;
                               IF { DIG 2 ;
                                    CONTRACT unit ;
                                    IF_NONE { PUSH string "Not a contract" ; FAILWITH } {} ;
                                    SWAP ;
                                    UNIT ;
                                    TRANSFER_TOKENS ;
                                    NIL operation ;
                                    SWAP ;
                                    CONS }
                                  { DIG 2 ; DROP 2 ; NIL operation } } ;
                          PAIR }
                        { DIG 2 ; DROP 2 ; NIL operation ; PAIR } }
                    { IF_LEFT
                        { DIG 2 ;
                          DIG 3 ;
                          DROP 2 ;
                          UNPAIR ;
                          UNPAIR ;
                          UNPAIR ;
                          DIG 2 ;
                          UNPAIR ;
                          DUP 6 ;
                          CAR ;
                          CAR ;
                          DIG 5 ;
                          PAIR ;
                          DUG 2 ;
                          PAIR ;
                          DIG 3 ;
                          DIG 3 ;
                          DIG 2 ;
                          UNPAIR ;
                          DIG 4 ;
                          UNPAIR ;
                          DIG 7 ;
                          SENDER ;
                          COMPARE ;
                          NEQ ;
                          IF { DROP 6 ; PUSH string "Access denied." ; FAILWITH }
                             { SWAP ;
                               DIG 3 ;
                               DIG 3 ;
                               PAIR ;
                               DIG 4 ;
                               DIG 3 ;
                               PAIR ;
                               PAIR ;
                               SOME ;
                               DIG 2 ;
                               UPDATE } ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          CDR ;
                          DIG 2 ;
                          CAR ;
                          CDR ;
                          DIG 2 ;
                          PAIR ;
                          PAIR ;
                          NIL operation ;
                          PAIR }
                        { DIG 4 ;
                          DROP 2 ;
                          SENDER ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          CAR ;
                          CDR ;
                          SWAP ;
                          DUP ;
                          DUG 2 ;
                          GET ;
                          IF_NONE
                            { DROP 4 ; PUSH string "You are not in the game." ; FAILWITH }
                            { DUP 3 ;
                              CAR ;
                              CAR ;
                              SWAP ;
                              DUP ;
                              DUG 2 ;
                              CAR ;
                              CDR ;
                              CDR ;
                              SWAP ;
                              DUP ;
                              DUG 2 ;
                              SWAP ;
                              DUP ;
                              DUG 2 ;
                              GET ;
                              IF_NONE { PUSH string "Unknown kind of token" ; FAILWITH } {} ;
                              DIG 7 ;
                              IF { SWAP ;
                                   DROP ;
                                   DUP 5 ;
                                   CAR ;
                                   CDR ;
                                   PAIR ;
                                   DIG 3 ;
                                   DIG 3 ;
                                   PAIR ;
                                   PAIR ;
                                   DIG 3 ;
                                   SWAP ;
                                   EXEC ;
                                   DIG 2 ;
                                   CDR ;
                                   SWAP ;
                                   DIG 2 ;
                                   PAIR ;
                                   PAIR ;
                                   NIL operation ;
                                   PAIR }
                                 { DUP ;
                                   DUG 3 ;
                                   DUP ;
                                   CDR ;
                                   CDR ;
                                   AMOUNT ;
                                   COMPARE ;
                                   NEQ ;
                                   IF { PUSH string "Sorry, the token you are trying to purchase has a different price" ;
                                        FAILWITH }
                                      {} ;
                                   PUSH nat 0 ;
                                   SWAP ;
                                   DUP ;
                                   DUG 2 ;
                                   CAR ;
                                   CDR ;
                                   COMPARE ;
                                   EQ ;
                                   IF { PUSH string "Sorry, the token you are trying to purchase is out of stock" ;
                                        FAILWITH }
                                      {} ;
                                   DIG 2 ;
                                   SWAP ;
                                   DUP ;
                                   DUG 2 ;
                                   CDR ;
                                   PUSH nat 1 ;
                                   DUP 4 ;
                                   CAR ;
                                   CDR ;
                                   SUB ;
                                   ABS ;
                                   DUP 4 ;
                                   CAR ;
                                   CAR ;
                                   PAIR ;
                                   PAIR ;
                                   SOME ;
                                   DIG 3 ;
                                   UPDATE ;
                                   SELF_ADDRESS ;
                                   NIL (pair address (pair nat nat)) ;
                                   SENDER ;
                                   PUSH nat 1 ;
                                   DUP 6 ;
                                   CAR ;
                                   CDR ;
                                   SUB ;
                                   ABS ;
                                   PUSH nat 1 ;
                                   SWAP ;
                                   PAIR ;
                                   SWAP ;
                                   PAIR ;
                                   CONS ;
                                   SWAP ;
                                   PAIR ;
                                   DIG 2 ;
                                   CDR ;
                                   CAR ;
                                   CONTRACT %transfer
                                     (list (pair (address %from_)
                                                 (list %txs (pair (address %to_) (pair (nat %token_id) (nat %amount)))))) ;
                                   IF_NONE { PUSH string "Invalid external token contract" ; FAILWITH } {} ;
                                   PUSH mutez 0 ;
                                   NIL (pair address (list (pair address (pair nat nat)))) ;
                                   DIG 3 ;
                                   CONS ;
                                   TRANSFER_TOKENS ;
                                   SELF_ADDRESS ;
                                   CONTRACT unit ;
                                   IF_NONE { PUSH string "Not a contract" ; FAILWITH } {} ;
                                   AMOUNT ;
                                   UNIT ;
                                   TRANSFER_TOKENS ;
                                   DIG 2 ;
                                   NIL operation ;
                                   DIG 2 ;
                                   CONS ;
                                   DIG 2 ;
                                   CONS ;
                                   PAIR ;
                                   SWAP ;
                                   DUP 5 ;
                                   CAR ;
                                   CDR ;
                                   PAIR ;
                                   DIG 3 ;
                                   DIG 3 ;
                                   PAIR ;
                                   PAIR ;
                                   DIG 3 ;
                                   SWAP ;
                                   EXEC ;
                                   DIG 2 ;
                                   CDR ;
                                   SWAP ;
                                   DUP 3 ;
                                   CDR ;
                                   PAIR ;
                                   PAIR ;
                                   SWAP ;
                                   CAR ;
                                   PAIR } } } } } } } }

